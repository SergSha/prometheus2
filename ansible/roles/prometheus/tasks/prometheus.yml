---
# tasks file for prometheus

- name: Prometheus | create prometheus system group
  group:
    name: prometheus
    system: true
    state: present

- name: Prometheus | create prometheus system user
  user:
    name: prometheus
    system: true
    shell: "/usr/sbin/nologin"
    group: prometheus
    createhome: false
    home: "{{ prometheus_db_dir }}"

- name: Prometheus | create prometheus data directory
  file:
    path: "{{ prometheus_db_dir }}"
    state: directory
    owner: prometheus
    group: prometheus
    mode: 0755

- name: Prometheus | create prometheus configuration directories
  file:
    path: "{{ prometheus_config_dir }}"
    state: directory
    owner: root
    group: prometheus
    mode: 0770

- block:
  - name: Prometheus | "Get checksum list"
    set_fact:
      __prometheus_checksums: "{{ lookup('url', 'https://github.com/prometheus/prometheus/releases/download/v' + prometheus_version + '/sha256sums.txt', wantlist=True) | list }}"
    run_once: true

  - name: Prometheus | "Get checksum for {{ go_arch }} architecture"
    set_fact:
      __prometheus_checksum: "{{ item.split(' ')[0] }}"
    loop: "{{ __prometheus_checksums }}"
    when:
    - "('linux-' + go_arch + '.tar.gz') in item"
  delegate_to: localhost
  when:
    - prometheus_binary_local_dir | length == 0
    - not prometheus_skip_install

- block:
    - name: Prometheus | download prometheus binary to local folder
      become: false
      get_url:
        url: "https://github.com/prometheus/prometheus/releases/download/v{{ prometheus_version }}/prometheus-{{ prometheus_version }}.linux-{{ go_arch }}.tar.gz"
        dest: "/tmp/prometheus-{{ prometheus_version }}.linux-{{ go_arch }}.tar.gz"
        checksum: "sha256:{{ __prometheus_checksum }}"
      register: _download_archive
      until: _download_archive is succeeded
      retries: 5
      delay: 2
      # run_once: true # <-- this cannot be set due to multi-arch support
      delegate_to: localhost
      check_mode: false

    - name: Prometheus | unpack prometheus binaries
      become: false
      unarchive:
        src: "/tmp/prometheus-{{ prometheus_version }}.linux-{{ go_arch }}.tar.gz"
        dest: "/tmp"
        creates: "/tmp/prometheus-{{ prometheus_version }}.linux-{{ go_arch }}/"
      delegate_to: localhost
      check_mode: false

    - name: Prometheus | propagate official prometheus and promtool binaries
      copy:
        src: "/tmp/prometheus-{{ prometheus_version }}.linux-{{ go_arch }}/{{ item }}"
        dest: "{{ _prometheus_binary_install_dir }}/{{ item }}"
        mode: 0755
        owner: root
        group: root
      loop:
        - prometheus
        - promtool

    - name: Prometheus | propagate official console templates
      copy:
        src: "/tmp/prometheus-{{ prometheus_version }}.linux-{{ go_arch }}/{{ item }}/"
        dest: "{{ prometheus_config_dir }}/{{ item }}"
        mode: 0644
        owner: root
        group: root
      loop:
        - console_libraries
        - consoles
        - prometheus.yml
  when:
    - prometheus_binary_local_dir | length == 0
    - not prometheus_skip_install

- name: Prometheus | propagate locally distributed prometheus and promtool binaries
  copy:
    src: "{{ prometheus_binary_local_dir }}/{{ item }}"
    dest: "{{ _prometheus_binary_install_dir }}/{{ item }}"
    mode: 0755
    owner: root
    group: root
  loop:
    - prometheus
    - promtool
  when:
    - prometheus_binary_local_dir | length > 0
    - not prometheus_skip_install

- name: Prometheus | create prometheus systemd service unit
  template:
    src: prometheus.service.j2
    dest: /etc/systemd/system/prometheus.service
    owner: root
    group: root
    mode: 0644

- name: Prometheus | edit config file /etc/prometheus/prometheus.yml
  lineinfile:
    path: /etc/prometheus/prometheus.yml
    insertafter: EOF
    line: "  - job_name: 'node_exporter_clients'\n    scrape_interval: 5s\n    static_configs:\n      - targets: ['{{ prometheus_ip }}:9100']"
    state: present

- name: Prometheus | ensure prometheus service is started and enabled
  systemd:
    daemon_reload: true
    name: prometheus
    state: restarted
    enabled: true

#- name: Prometheus | Install SELinux dependencies
#  package:
#    name: "{{ item }}"
#    state: present
#  with_items: "{{ prometheus_selinux_packages }}"
#  register: _install_packages
#  until: _install_packages is succeeded
#  retries: 5
#  delay: 2
#  when:
#    - ansible_version.full is version('2.4', '>=')
#    - ansible_selinux.status == "enabled"

#- name: Prometheus | Allow prometheus to bind to port in SELinux
#  seport:
#    ports: "{{ prometheus_web_listen_address.split(':')[1] }}"
#    proto: tcp
#    setype: http_port_t
#    state: present
#  when:
#    - ansible_version.full is version('2.4', '>=')
#    - ansible_selinux.status == "enabled"

